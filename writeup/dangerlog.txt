1. we used a thread pool to process XML requests from clients. If the user input is invalid, the thread is not recycled but remains occupied. Because we only used the catch statement to catch and print the exception to the console, I did not handle the exception and return the thread to the thread pool. In the future we can add code to handle exceptions and return threads.

2. We have not solved the problem of database concurrency perfectly when the same user can log in to multiple clients simultaneously and open the exact same order at the same time, which has the potential to trigger trades and splits in the order. In the same transaction id, more than two records in the OPEN state may be generated in the database after splitting. Although it is unlikely to happen, it does exist.
However, in the actual application scenario, we believe that the same user cannot log in from multiple clients at the same time, which is not safe. Therefore, we can increase the login authentication function for users in the future to ensure that the same user can only log in on one device. This not only improves security, but also helps us address this little remaining database concurrency vulnerability.